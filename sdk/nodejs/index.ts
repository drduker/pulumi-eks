// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cluster";
export * from "./clusterCreationRoleProvider";
export * from "./managedNodeGroup";
export * from "./nodeGroup";
export * from "./nodeGroupSecurityGroup";
export * from "./provider";
export * from "./vpcCni";

// Export sub-modules:
import * as types from "./types";

export {
    types,
};

// Import resources to register:
import { Cluster } from "./cluster";
import { ClusterCreationRoleProvider } from "./clusterCreationRoleProvider";
import { ManagedNodeGroup } from "./managedNodeGroup";
import { NodeGroup } from "./nodeGroup";
import { NodeGroupSecurityGroup } from "./nodeGroupSecurityGroup";
import { VpcCni } from "./vpcCni";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "eks:index:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "eks:index:ClusterCreationRoleProvider":
                return new ClusterCreationRoleProvider(name, <any>undefined, { urn })
            case "eks:index:ManagedNodeGroup":
                return new ManagedNodeGroup(name, <any>undefined, { urn })
            case "eks:index:NodeGroup":
                return new NodeGroup(name, <any>undefined, { urn })
            case "eks:index:NodeGroupSecurityGroup":
                return new NodeGroupSecurityGroup(name, <any>undefined, { urn })
            case "eks:index:VpcCni":
                return new VpcCni(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("eks", "index", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("eks", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:eks") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
