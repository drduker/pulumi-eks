// *** WARNING: this file was generated by pulumi-gen-eks. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

import * as pulumiAws from "@pulumi/aws";
import * as pulumiKubernetes from "@pulumi/kubernetes";

import {VpcCni} from "..";

/**
 * Describes the configuration options accepted by a cluster to create its own node groups.
 */
export interface ClusterNodeGroupOptions {
    /**
     * The AMI ID to use for the worker nodes.
     *
     * Defaults to the latest recommended EKS Optimized Linux AMI from the AWS Systems Manager Parameter Store.
     *
     * Note: `amiId` and `gpu` are mutually exclusive.
     *
     * See for more details:
     * - https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html.
     */
    amiId?: string;
    /**
     * The AMI Type to use for the worker nodes. 
     *
     * Only applicable when setting an AMI ID that is of type `arm64`. 
     *
     * Note: `amiType` and `gpu` are mutually exclusive.
     */
    amiType?: string;
    /**
     * The tags to apply to the NodeGroup's AutoScalingGroup in the CloudFormation Stack.
     *
     * Per AWS, all stack-level tags, including automatically created tags, and the `cloudFormationTags` option are propagated to resources that AWS CloudFormation supports, including the AutoScalingGroup. See https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html
     *
     * Note: Given the inheritance of auto-generated CF tags and `cloudFormationTags`, you should either supply the tag in `autoScalingGroupTags` or `cloudFormationTags`, but not both.
     */
    autoScalingGroupTags?: {[key: string]: string};
    /**
     * Additional args to pass directly to `/etc/eks/bootstrap.sh`. For details on available options, see: https://github.com/awslabs/amazon-eks-ami/blob/master/files/bootstrap.sh. Note that the `--apiserver-endpoint`, `--b64-cluster-ca` and `--kubelet-extra-args` flags are included automatically based on other configuration parameters.
     */
    bootstrapExtraArgs?: string;
    /**
     * The tags to apply to the CloudFormation Stack of the Worker NodeGroup.
     *
     * Note: Given the inheritance of auto-generated CF tags and `cloudFormationTags`, you should either supply the tag in `autoScalingGroupTags` or `cloudFormationTags`, but not both.
     */
    cloudFormationTags?: {[key: string]: string};
    /**
     * The ingress rule that gives node group access.
     */
    clusterIngressRule?: pulumiAws.ec2.SecurityGroupRule;
    /**
     * The number of worker nodes that should be running in the cluster. Defaults to 2.
     */
    desiredCapacity?: number;
    /**
     * Encrypt the root block device of the nodes in the node group.
     */
    encryptRootBlockDevice?: boolean;
    /**
     * Extra security groups to attach on all nodes in this worker node group.
     *
     * This additional set of security groups captures any user application rules that will be needed for the nodes.
     */
    extraNodeSecurityGroups?: pulumiAws.ec2.SecurityGroup[];
    /**
     * Use the latest recommended EKS Optimized Linux AMI with GPU support for the worker nodes from the AWS Systems Manager Parameter Store.
     *
     * Defaults to false.
     *
     * Note: `gpu` and `amiId` are mutually exclusive.
     *
     * See for more details:
     * - https://docs.aws.amazon.com/eks/latest/userguide/eks-optimized-ami.html
     * - https://docs.aws.amazon.com/eks/latest/userguide/retrieve-ami-id.html
     */
    gpu?: boolean;
    /**
     * The ingress rule that gives node group access.
     */
    instanceProfile?: pulumiAws.iam.InstanceProfile;
    /**
     * The instance type to use for the cluster's nodes. Defaults to "t2.medium".
     */
    instanceType?: string;
    /**
     * Name of the key pair to use for SSH access to worker nodes.
     */
    keyName?: string;
    /**
     * Extra args to pass to the Kubelet. Corresponds to the options passed in the `--kubeletExtraArgs` flag to `/etc/eks/bootstrap.sh`. For example, '--port=10251 --address=0.0.0.0'. Note that the `labels` and `taints` properties will be applied to this list (using `--node-labels` and `--register-with-taints` respectively) after to the explicit `kubeletExtraArgs`.
     */
    kubeletExtraArgs?: string;
    /**
     * Custom k8s node labels to be attached to each worker node. Adds the given key/value pairs to the `--node-labels` kubelet argument.
     */
    labels?: {[key: string]: string};
    /**
     * The maximum number of worker nodes running in the cluster. Defaults to 2.
     */
    maxSize?: number;
    /**
     * The minimum number of worker nodes running in the cluster. Defaults to 1.
     */
    minSize?: number;
    /**
     * Whether or not to auto-assign public IP addresses on the EKS worker nodes. If this toggle is set to true, the EKS workers will be auto-assigned public IPs. If false, they will not be auto-assigned public IPs.
     */
    nodeAssociatePublicIpAddress?: boolean;
    /**
     * Public key material for SSH access to worker nodes. See allowed formats at:
     * https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-key-pairs.html
     * If not provided, no SSH access is enabled on VMs.
     */
    nodePublicKey?: string;
    /**
     * The size in GiB of a cluster node's root volume. Defaults to 20.
     */
    nodeRootVolumeSize?: number;
    /**
     * The security group for the worker node group to communicate with the cluster.
     *
     * This security group requires specific inbound and outbound rules.
     *
     * See for more details:
     * https://docs.aws.amazon.com/eks/latest/userguide/sec-group-reqs.html
     *
     * Note: The `nodeSecurityGroup` option and the cluster option`nodeSecurityGroupTags` are mutually exclusive.
     */
    nodeSecurityGroup?: pulumiAws.ec2.SecurityGroup;
    /**
     * The set of subnets to override and use for the worker node group.
     *
     * Setting this option overrides which subnets to use for the worker node group, regardless if the cluster's `subnetIds` is set, or if `publicSubnetIds` and/or `privateSubnetIds` were set.
     */
    nodeSubnetIds?: string[];
    /**
     * Extra code to run on node startup. This code will run after the AWS EKS bootstrapping code and before the node signals its readiness to the managing CloudFormation stack. This code must be a typical user data script: critically it must begin with an interpreter directive (i.e. a `#!`).
     */
    nodeUserData?: string;
    /**
     * User specified code to run on node startup. This code is expected to handle the full AWS EKS bootstrapping code and signal node readiness to the managing CloudFormation stack. This code must be a complete and executable user data script in bash (Linux) or powershell (Windows).
     *
     * See for more details: https://docs.aws.amazon.com/eks/latest/userguide/worker.html
     */
    nodeUserDataOverride?: string;
    /**
     * Bidding price for spot instance. If set, only spot instances will be added as worker node.
     */
    spotPrice?: string;
    /**
     * Custom k8s node taints to be attached to each worker node. Adds the given taints to the `--register-with-taints` kubelet argument
     */
    taints?: {[key: string]: outputs.Taint};
    /**
     * Desired Kubernetes master / control plane version. If you do not specify a value, the latest available version is used.
     */
    version?: string;
}

/**
 * Defines the core set of data associated with an EKS cluster, including the network in which it runs.
 */
export interface CoreData {
    awsProvider?: pulumiAws.Provider;
    cluster: pulumiAws.eks.Cluster;
    /**
     * The IAM Role attached to the EKS Cluster
     */
    clusterIamRole: pulumiAws.iam.Role;
    clusterSecurityGroup: pulumiAws.ec2.SecurityGroup;
    eksNodeAccess?: pulumiKubernetes.core.v1.ConfigMap;
    encryptionConfig?: pulumiAws.types.output.eks.ClusterEncryptionConfig;
    endpoint: string;
    fargateProfile?: pulumiAws.eks.FargateProfile;
    instanceRoles: pulumiAws.iam.Role[];
    kubeconfig?: any;
    nodeGroupOptions: outputs.ClusterNodeGroupOptions;
    nodeSecurityGroupTags?: {[key: string]: string};
    oidcProvider?: pulumiAws.iam.OpenIdConnectProvider;
    privateSubnetIds?: string[];
    provider: pulumiKubernetes.Provider;
    publicSubnetIds?: string[];
    storageClasses?: {[key: string]: pulumiKubernetes.storage.v1.StorageClass};
    subnetIds: string[];
    tags?: {[key: string]: string};
    vpcCni?: VpcCni;
    vpcId: string;
}

/**
 * NodeGroupData describes the resources created for the given NodeGroup.
 */
export interface NodeGroupData {
    /**
     * The AutoScalingGroup name for the node group.
     */
    autoScalingGroupName: string;
    /**
     * The CloudFormation Stack which defines the Node AutoScalingGroup.
     */
    cfnStack: pulumiAws.cloudformation.Stack;
    /**
     * The additional security groups for the node group that captures user-specific rules.
     */
    extraNodeSecurityGroups: pulumiAws.ec2.SecurityGroup[];
    /**
     * The security group for the node group to communicate with the cluster.
     */
    nodeSecurityGroup: pulumiAws.ec2.SecurityGroup;
}

/**
 * Represents a Kubernetes `taint` to apply to all Nodes in a NodeGroup. See https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/.
 */
export interface Taint {
    /**
     * The effect of the taint.
     */
    effect: string;
    /**
     * The value of the taint.
     */
    value: string;
}

